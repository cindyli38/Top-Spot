import React, { useEffect, useState, useRef } from 'react'
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Cards from './Cards';
import Modal from './Modal';

const Dashboard = () => {

    const [playlistName, setPlayListName] = useState("")



    const [show, setShow] = useState(false)
    const token = useRef("")
    const artists = useRef([])
    const tracks = useRef([])
    const artistTrackMap = useRef({})
    const userId = useRef("")
    const playListId = useRef("")
    const [showModal, setShowModal] = useState(false)

    const navigate = useNavigate();

    useEffect(() => { getToken(); getData() })

    function getToken() {
        const hash = window.location.hash
        if (hash.length === 0)
            navigate("/");
        else { token.current = (hash.split("=")[1].split("&")[0]) }
    }



    async function getData() {
        if (artists.current.length === 0 && tracks.current.length === 0) {
            await getArtists().then(() => {
                artists.current.forEach(async (artist) => {
                    const id = artist["id"]
                    await getTracks(id)
                    artistTrackMap.current[artist.name] = tracks.current
                })
            })
        }
        if (userId.current.length === 0) await getUserId();
    }

    async function getArtists() {
        const config = {
            headers: {
                "Authorization": `Bearer ${token.current}`,
                "Content-Type": "application/json",
            },
            params: {
                limit: 10,
                offset: 0,
                time_range: "medium_term",
            }
        }
        const artistsResponse = await axios.get("https://api.spotify.com/v1/me/top/artists", config)
        artists.current = artistsResponse.data.items
    }

    async function getTracks(id) {
        const config = {
            headers: {
                "Authorization": `Bearer ${token.current}`,
                "Content-Type": "application/json",
            },
            params: {
                market: "ES"
            }
        }
        const tracksResponse = await axios.get(`https://api.spotify.com/v1/artists/${id}/top-tracks`, config)
        tracks.current = tracksResponse.data.tracks


    }

    async function getUserId() {
        const config = {
            headers: {
                "Authorization": `Bearer ${token.current}`,
                "Content-Type": "application/json",
            },
        }
        const userIdResponse = await axios.get("https://api.spotify.com/v1/me", config)
        userId.current = userIdResponse.data.id

    }



    async function postPlayList() {
        if (artists.length === 0) getData()

        const config = {
            headers: {
                "Authorization": `Bearer ${token.current}`,
                "Content-Type": "application/json",
            }
        }
        const data = {
            "name": `${playlistName}`,
            "description": "Automatically Generated by TopSpot",
            "public": false,
        }
        const playlistResponse = await axios.post(`https://api.spotify.com/v1/users/${userId.current}/playlists`, data, config)
        playListId.current = playlistResponse.data.id


    }

    async function addTracks() {
        const uris = []
        artists.current.forEach((artist, index) => {
            const name = artist.name
            artistTrackMap.current[name].slice(0, 3).forEach((track, idx) => {
                uris[index * 3 + idx] = track.uri
            })

        })

        const URIS = uris.join(",")
        console.log(URIS)

        const config = {
            headers: {
                "Authorization": `Bearer ${token.current}`,
                "Content-Type": "application/json",
            },
            params: {
                uris: URIS
            }
        }
        const data = {
            uris: `spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M`
        }
        await axios.post(`https://api.spotify.com/v1/playlists/${playListId.current}/tracks`, data, config)

    }


    async function createPlayList() {
        setShowModal(true)
        await postPlayList()
        await addTracks()



    }


    return (
        <div className="outerWrapper">
            <h3 className="title">
                Create a PlayList Using Your Top Artist's Tracks
            </h3>
            <button onClick={() => setShow(!show)}>
                {show ? <div>Hide Top Artists and Tracks</div> : <div>Show Top Artists and Tracks</div>}
            </button>
            <div>
                <form action="" onSubmit={(e) => { e.preventDefault(); createPlayList() }}>
                    <input type="text" placeholder=" Enter PlayList Name" onChange={(e) => { setPlayListName(e.target.value) }} />
                    <button>Create PlayList</button>
                </form>
            </div>
            {show && <div> <Cards Artists={artists.current} artistTrackMap={artistTrackMap.current}></Cards></div>}
            {showModal && playlistName.length === 0 && <Modal setShowModal={setShowModal} message={"Name Cannot be Empty!"} />}
            {showModal && playlistName.length !== 0 && <Modal setShowModal={setShowModal} message={"PlayList Created!"} />}
        </div >
    )
}

export default Dashboard